# ===================================================================
# Spring Boot configuration for the "dev" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================


spring:
  config:
    # Import shared config first
    import: optional:file:app/config/common.yml
    # Then service-specific config (will override shared)
  # ===================================================================
  # DEV profile - fixed and tidied
  # ===================================================================
  cloud:
    function:
      definition: kafkaProducer;kafkaConsumer;dlqConsumer
    stream:
      bindings:
        # Main consumer binding
        kafkaConsumer-in-0:
          destination: ${server.name}.events
          content-type: application/*+avro
          group: ${server.name}-route-group
          consumer:
            use-native-decoding: true
            # Retry configuration
            max-attempts: 3
            back-off-initial-interval: 1000
            back-off-multiplier: 2.0
            back-off-max-interval: 10000
            # DLQ configuration - CRITICAL for DLQ to work
            enable-dlq: true
            dlq-name: ${server.name}.events.dlq
            republish-to-dlq: true
            # Concurrency
            concurrency: 2

        # Producer binding
        kafkaProducer-out-0:
          destination: ${server.name}.events
          contentType: application/*+avro
          producer:
            useNativeEncoding: true

        # DLQ consumer binding (optional - for monitoring failed messages)
        dlqConsumer-in-0:
          destination: ${server.name}.events.dlq
          content-type: application/octet-stream
          group: ${server.name}-dlq-group
          consumer:
            use-native-decoding: true
            max-attempts: 1

      # Kafka-specific configurations
      kafka:
        bindings:
          kafkaConsumer-in-0:
            consumer:
              # Enable DLQ at Kafka level
              enableDlq: true
              dlqName: ${server.name}.events.dlq
              # Ensure proper serialization for DLQ messages
              dlqProducerProperties:
                key.serializer: org.apache.kafka.common.serialization.StringSerializer
                value.serializer: org.apache.kafka.common.serialization.ByteArraySerializer

          dlqConsumer-in-0:
            consumer:
              # DLQ consumer properties
              startOffset: latest
